{"version":3,"file":"component---src-pages-map-tsx-4435006cd144c10b08fd.js","mappings":"8s4KASMA,EAA6C,CACjDC,KAAM,UACNC,YAAY,EACZC,KAAMC,GAGFC,EAAsC,CAC1CC,GAAI,WACJL,KAAM,OACNM,OAAQ,gBACRC,OAAQ,CAAC,EACTC,MAAO,CACL,aAAc,UACd,eAAgB,CACd,OACA,CAAC,UAAW,CAAC,gBAAiB,UAAU,GACxC,GACA,MAKAC,EAAyC,CAC7CJ,GAAI,WACJL,KAAM,OACNM,OAAQ,gBACRC,OAAQ,CAAC,EACTC,MAAO,CACL,aAAc,OACd,eAAgB,CAAC,cAAe,CAAC,UAAW,CAAC,QAAS,EAAG,EAAG,GAAI,MAsFpE,EAlFgB,SAAH,GAIP,IACEE,EAJF,EAAJR,KAImBS,KAAKC,aAAaC,YACrC,EAAsBC,EAAAA,WAAfC,EAAG,KAAEC,EAAM,KAmDlB,OAjDAF,EAAAA,WAAgB,WACd,GAAKC,EAAL,CAKA,IAAIE,EAJJF,EAAIG,UAAU,gBAAiBnB,GAC/BgB,EAAII,SAASf,GACbW,EAAII,SAASV,GAGb,IAAMW,EAAiB,SAACC,GAAoB,MACtCA,SAAW,QAAV,EAADA,EAAGC,gBAAQ,OAAXC,EAAaC,SACXP,GACFF,EAAIU,gBACF,CAAEnB,OAAQ,gBAAiBD,GAAIY,GAC/B,CAAES,OAAO,IAGbT,EAAYI,EAAEC,SAAS,GAAGjB,GAC1BU,EAAIU,gBACF,CAAEnB,OAAQ,gBAAiBD,GAAIY,GAC/B,CAAES,OAAO,IAGf,EAEMC,EAAiB,WACH,OAAdV,GACFF,EAAIU,gBACF,CAAEnB,OAAQ,gBAAiBD,GAAIY,GAC/B,CAAES,OAAO,IAGbT,OAAYW,CACd,EAEMC,EAAiB,SAACR,GAAoB,MACpCS,EAAOT,EAAEC,WAAoC,QAA5B,EAAID,EAAEC,SAAS,GAAGS,kBAAU,aAAxBC,EAA0BF,OACrD,IAAIG,EAAAA,IAAAA,OAAiBC,UAAUb,EAAEc,QAAQC,QAAQN,GAAMO,MAAMtB,EAC/D,EAMA,OAJAA,EAAIuB,GAAG,YAAa,WAAYlB,GAChCL,EAAIuB,GAAG,aAAc,WAAYX,GACjCZ,EAAIuB,GAAG,QAAS,WAAYT,GAErB,WACLd,EAAIwB,IAAI,YAAa,WAAYnB,GACjCL,EAAIwB,IAAI,aAAc,WAAYZ,GAClCZ,EAAIwB,IAAI,QAAS,WAAYV,EAC/B,CA7CgB,CA8ClB,GAAG,CAACd,IAGFD,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAAAA,KAAAA,KAAAA,eACAA,EAAAA,cAAC0B,EAAAA,IAAG,CAACC,GAAI,CAAEC,MAAO,IAAKC,OAAQ,MAC7B7B,EAAAA,cAAC8B,EAAAA,IAAS,CACRC,SAAU7B,EACV8B,KAAM,EACNC,OAAQ,EAAE,MAAO,OACjBrC,MAAOA,KAKjB,C","sources":["webpack://fusion-design-system/./src/pages/map.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { graphql } from \"gatsby\";\nimport bostonShapes from \"../utils/boston-zip-shapes.json\";\nimport { Box, MapboxMap, mapboxgl } from \"fusion\";\n\ntype PolygonEvent = mapboxgl.MapMouseEvent & {\n  features?: mapboxgl.MapboxGeoJSONFeature[] | undefined;\n} & mapboxgl.EventData;\n\nconst bostonShapesSource: mapboxgl.AnySourceData = {\n  type: \"geojson\",\n  generateId: true,\n  data: bostonShapes as GeoJSON.FeatureCollection<GeoJSON.Geometry>,\n};\n\nconst polygonFillLayer: mapboxgl.AnyLayer = {\n  id: \"polygons\",\n  type: \"fill\",\n  source: \"boston-shapes\",\n  layout: {},\n  paint: {\n    \"fill-color\": \"#0080ff\",\n    \"fill-opacity\": [\n      \"case\",\n      [\"boolean\", [\"feature-state\", \"hover\"], false],\n      0.8,\n      0.3,\n    ],\n  },\n};\n\nconst polygonOutlineLayer: mapboxgl.AnyLayer = {\n  id: \"outlines\",\n  type: \"line\",\n  source: \"boston-shapes\",\n  layout: {},\n  paint: {\n    \"line-color\": \"#000\",\n    \"line-opacity\": [\"interpolate\", [\"linear\"], [\"zoom\"], 8, 0, 12, 0.9],\n  },\n};\n\nconst MapPage = ({\n  data,\n}: {\n  data: { site: { siteMetadata: { mapboxToken: string } } };\n}) => {\n  const token = data.site.siteMetadata.mapboxToken;\n  const [map, setMap] = React.useState<mapboxgl.Map>();\n\n  React.useEffect(() => {\n    if (!map) return;\n    map.addSource(\"boston-shapes\", bostonShapesSource);\n    map.addLayer(polygonFillLayer);\n    map.addLayer(polygonOutlineLayer);\n\n    let hoveredId: string | number | undefined;\n    const onPolygonHover = (e: PolygonEvent) => {\n      if (e?.features?.length) {\n        if (hoveredId) {\n          map.setFeatureState(\n            { source: \"boston-shapes\", id: hoveredId },\n            { hover: false }\n          );\n        }\n        hoveredId = e.features[0].id;\n        map.setFeatureState(\n          { source: \"boston-shapes\", id: hoveredId },\n          { hover: true }\n        );\n      }\n    };\n\n    const onPolygonLeave = () => {\n      if (hoveredId !== null) {\n        map.setFeatureState(\n          { source: \"boston-shapes\", id: hoveredId },\n          { hover: false }\n        );\n      }\n      hoveredId = undefined;\n    };\n\n    const onPolygonClick = (e: PolygonEvent) => {\n      const name = e.features && e.features[0].properties?.name;\n      new mapboxgl.Popup().setLngLat(e.lngLat).setHTML(name).addTo(map);\n    };\n\n    map.on(\"mousemove\", \"polygons\", onPolygonHover);\n    map.on(\"mouseleave\", \"polygons\", onPolygonLeave);\n    map.on(\"click\", \"polygons\", onPolygonClick);\n\n    return () => {\n      map.off(\"mousemove\", \"polygons\", onPolygonHover);\n      map.off(\"mouseleave\", \"polygons\", onPolygonLeave);\n      map.off(\"click\", \"polygons\", onPolygonClick);\n    };\n  }, [map]);\n\n  return (\n    <>\n      <h1>Boston Zips</h1>\n      <Box sx={{ width: 800, height: 800 }}>\n        <MapboxMap\n          onLoaded={setMap}\n          zoom={9}\n          center={[-71.05, 42.05]}\n          token={token}\n        />\n      </Box>\n    </>\n  );\n};\n\nexport const query = graphql`\n  query MyQuery {\n    site {\n      siteMetadata {\n        mapboxToken\n      }\n    }\n  }\n`;\n\nexport default MapPage;\n"],"names":["bostonShapesSource","type","generateId","data","bostonShapes","polygonFillLayer","id","source","layout","paint","polygonOutlineLayer","token","site","siteMetadata","mapboxToken","React","map","setMap","hoveredId","addSource","addLayer","onPolygonHover","e","features","_e$features","length","setFeatureState","hover","onPolygonLeave","undefined","onPolygonClick","name","properties","_e$features$0$propert","mapboxgl","setLngLat","lngLat","setHTML","addTo","on","off","Box","sx","width","height","MapboxMap","onLoaded","zoom","center"],"sourceRoot":""}